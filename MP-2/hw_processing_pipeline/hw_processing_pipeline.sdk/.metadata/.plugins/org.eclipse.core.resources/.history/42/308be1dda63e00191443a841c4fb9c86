/*****************************************************************************
 * Joseph Zambreno
 * Phillip Jones
 *
 * Department of Electrical and Computer Engineering
 * Iowa State University
 *****************************************************************************/

/*****************************************************************************
 * camera_app.c - main camera application code. The camera configures the various
 * video in and video out peripherals, and (optionally) performs some
 * image processing on data coming in from the vdma.
 *
 *
 * NOTES:
 * 02/04/14 by JAZ::Design created.
 *****************************************************************************/

#include "camera_app.h"


camera_config_t camera_config;

// Pointers to the S2MM memory frame and M2SS memory frame
volatile Xuint16 *pS2MM_Mem;
volatile Xuint16 *pMM2S_Mem;


// Register address for the switch and button gpio ports.
uint32_t *sw_ptr = XPAR_SWS_8BITS_BASEADDR;
uint32_t *btn_ptr = XPAR_BTNS_5BITS_BASEADDR;

// Defines the max number of images the storage should hold.
#define MAX_IMAGES_TO_RECORD 32

// SWITCH bitmasks.
#define SW_0       0x01
#define SW_1       0x02
#define SW_2       0x04
#define SW_3       0x08
#define SW_4	   0x10
#define SW_5	   0x20
#define SW_6	   0x40
#define SW_7	   0x80

// BUTTON bitmasks.
#define BTN_CENTER 0x01
#define BTN_DOWN   0x02
#define BTN_LEFT   0x04
#define BTN_RIGHT  0x08
#define BTN_UP     0x10

// User given command to exit the program.
// True = Yes
// False = No
bool exit_flag = false;

// Array to hold the stored images.
uint16_t images[1920*1080*MAX_IMAGES_TO_RECORD];

// This index is used to store images.
int image_index = 0;

// Used to switch between stored pictures.
int replay_index = 0;

// Status of all button presses. True if one or more buttons are pressed.
// False otherwise.
bool button_flag = false;

// True = debounce_counter has hit or exceeded the debounce_threshold.
// False = not yet hit needed cycles.
bool debounce_finished = false;

// Counter used to debounce the buttons.
int debounce_counter = 0;

// Amount that the debounce counter has to hit to execute the buttons funtions.
int debounce_threshold = 10;

// Plays back individual or groups of frames.
// NONE     - No Replay allowed.
// IMAGE    - BTN_RIGHT displays the next captured frame to the screen.
// 			  BTN_LEFT decrements the current picture index and
//                     displays the previous picture..
// VIDEO    - BTN_UP displays all stored frames as a video.
// 			  BTN_LEFT plays the stored frames backwards.
enum Software_Replay {NONE, IMAGE, VIDEO};
enum Software_Replay replay_mode = NONE;

// Resolution of image.
const int res = 1920 * 1080;

// Holds image while color conversion is applied.
//uint8_t bayer[1920 * 1080];


// Main function. Initializes the devices and configures VDMA
int main() {

	camera_config_init(&camera_config);
	fmc_imageon_enable(&camera_config);
	//camera_loop(&camera_config);
	while(exit_flag == false)
	{
		camera_interface(&camera_config);
	}
	// From platform.c : Disables cache.
	cleanup_platform();
	// Exit command has been given.
	return 0;
}


// Initialize the camera configuration data structure
void camera_config_init(camera_config_t *config) {
    config->uBaseAddr_IIC_FmcIpmi =  XPAR_FMC_IPMI_ID_EEPROM_0_BASEADDR;   // Device for reading HDMI board IPMI EEPROM information
    config->uBaseAddr_IIC_FmcImageon = XPAR_FMC_IMAGEON_IIC_0_BASEADDR;    // Device for configuring the HDMI board
    // Uncomment when using VITA Camera for Video input
    config->uBaseAddr_VITA_SPI = XPAR_ONSEMI_VITA_SPI_0_S00_AXI_BASEADDR;  // Device for configuring the Camera sensor
    config->uBaseAddr_VITA_CAM = XPAR_ONSEMI_VITA_CAM_0_S00_AXI_BASEADDR;  // Device for receiving Camera sensor data
    // Uncomment as Video Hardware pipeline IP cores are added
 	config->uDeviceId_RGBYCC = XPAR_RGB2YCRCB_0_DEVICE_ID;
    // Uncomment when using the TPG for Video input
	//config->uBaseAddr_TPG_PatternGenerator = XPAR_V_TPG_0_S_AXI_CTRL_BASEADDR; // TPG Device
    config->uDeviceId_VTC_tpg   = XPAR_V_TC_0_DEVICE_ID;                        // Video Timer Controller (VTC) ID
    config->uDeviceId_VDMA_HdmiFrameBuffer = XPAR_AXI_VDMA_0_DEVICE_ID;         // VDMA ID
    config->uBaseAddr_MEM_HdmiFrameBuffer = XPAR_DDR_MEM_BASEADDR + 0x10000000; // VDMA base address for Frame buffers
    config->uNumFrames_HdmiFrameBuffer = XPAR_AXIVDMA_0_NUM_FSTORES;            // NUmber of VDMA Frame buffers
    return;
}


/**
 * Truncates a variable from 16-bit to 8-bit.
 */
uint8_t to8(Xuint16 data){
	data &= 0x00FF;
	return (uint8_t)(data);
}


// Main (SW) processing loop. Recommended to have an explicit exit condition
//void camera_loop(camera_config_t *config) {
//	Xuint32 parkptr;
//	Xuint32 vdma_S2MM_DMACR, vdma_MM2S_DMACR;
//	int i, j;
//	xil_printf("Entering main SW processing loop\r\n");
//
//	// Grab the DMA parkptr, and update it to ensure that when parked, the S2MM side is on frame 0, and the MM2S side on frame 1
//	parkptr = XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_PARKPTR_OFFSET);
//	parkptr &= ~XAXIVDMA_PARKPTR_READREF_MASK;
//	parkptr &= ~XAXIVDMA_PARKPTR_WRTREF_MASK;
//	parkptr |= 0x1;
//	XAxiVdma_WriteReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_PARKPTR_OFFSET, parkptr);
//
//	// Grab the DMA Control Registers, and clear circular park mode.
//	vdma_MM2S_DMACR = XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_TX_OFFSET+XAXIVDMA_CR_OFFSET);
//	XAxiVdma_WriteReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_TX_OFFSET+XAXIVDMA_CR_OFFSET, vdma_MM2S_DMACR & ~XAXIVDMA_CR_TAIL_EN_MASK);
//	vdma_S2MM_DMACR = XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_RX_OFFSET+XAXIVDMA_CR_OFFSET);
//	XAxiVdma_WriteReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_RX_OFFSET+XAXIVDMA_CR_OFFSET, vdma_S2MM_DMACR & ~XAXIVDMA_CR_TAIL_EN_MASK);
//
//	// Pointers to the S2MM memory frame and M2SS memory frame
//	pS2MM_Mem = (Xuint16 *)XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_S2MM_ADDR_OFFSET+XAXIVDMA_START_ADDR_OFFSET);
//	pMM2S_Mem = (Xuint16 *)XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_MM2S_ADDR_OFFSET+XAXIVDMA_START_ADDR_OFFSET+4);
//
//	xil_printf("Start processing 1000 frames!\r\n");
//	xil_printf("pS2MM_Mem = %X\n\r", pS2MM_Mem);
//	xil_printf("pMM2S_Mem = %X\n\r", pMM2S_Mem);
//
//	uint8_t red = 0, green = 0, blue = 0, lastCb = 0, lastCr = 0, Y0 = 0;
//	//0x80DD
//	// Run for 1000 frames before going back to HW mode
//	for (j = 0; j < 1000; j++) {
//		for (i = 0; i < res; i++)
//			bayer[i] = to8(pS2MM_Mem[i]);
//
//		//convert from bayer to normal
//		//convert from rgb to yuv
//		//convert from 4:4:4 to 4:2:2
//		for (i = 1; i < res - 1; i++) {
//			//pMM2S_Mem[i] = 0x0A21; // 12-bit with 4-bit padding, 4-bit per color (all green screen)
//			//horizontal red/green row
//			if(((i / 1920) % 2) == 0){
//				//green pixel
//				if ((i % 2) == 1){
//					red = (bayer[i + 1] + (bayer[i - 1])) / 2;
//					green = (bayer[i]);
//					blue = ((bayer[i + 1920]) + (bayer[i - 1920])) / 2;
//				}
//				//red pixel
//				else{
//					red = (bayer[i]);
//					green = ((bayer[i+ 1]) + (bayer[i - 1]) + (bayer[i + 1920]) + (bayer[i - 1920])) / 4;
//					blue = ((bayer[i + 1920 + 1]) + (bayer[i - 1920 - 1]) + (bayer[i + 1920 - 1]) + (bayer[i - 1920 + 1])) / 4;
//				}
//			}
//			//horizontal blue/green row
//			else{
//				//blue pixel
//				if ((i % 2) == 1){
//					red = ((bayer[i + 1920 + 1]) + (bayer[i - 1920 - 1]) + (bayer[i + 1920 - 1]) + (bayer[i - 1920 + 1])) / 4;
//					green = ((bayer[i + 1]) + (bayer[i - 1]) + (bayer[i + 1920]) + (bayer[i - 1920])) / 4;
//					blue = (bayer[i]);
//				}
//				//green pixel
//				else{
//					red = ((bayer[i + 1]) + (bayer[i - 1])) / 2;
//					green = (bayer[i]);
//					blue = ((bayer[i + 1920]) + (bayer[i - 1920])) / 2;
//				}
//			}
//			//rgb to yuv
//			//double conversion[] = {{0.183, 0.614, 0.062}, {-0.101, -0.338, 0.439}, {0.439, -0.399, -0.04}};
//			uint8_t Cb = (uint8_t)(128 + (((((int)red) * -101) - (((int)green) * 338) + (((int)blue) * 439)) / 1000));
//			uint8_t Cr = (uint8_t)(128 + (((((int)red) * 439) - (((int)green) * 399) - (((int)blue) * 40)) / 1000));
//			uint8_t Y1 = (uint8_t)(16 + (((((int)red) * 183) + (((int)green) * 614) + (((int)blue) * 62)) / 1000));
//			Cb = (Cb + lastCb) / 2;
//			Cr = (Cr + lastCr) / 2;
//			//0xCrY0CbY1
//			if((i % 2) == 1){
//				//xil_printf("Cr: %x  Y0: %x  Cb: %x  Y1: %x\r\n", Cr, Y0, Cb, Y1);
//				uint16_t final1 = (((uint16_t)(Cb) << 8) | ((uint16_t)(Y0)));
//				uint16_t final2 = (((uint16_t)(Cr) << 8) | ((uint16_t)(Y1)));
//				//xil_printf("Final value1: %x Final value2: %x\r\n", final1, final2);
//				pMM2S_Mem[i - 1] = final1;
//				pMM2S_Mem[i] = final2;
//			}
//			//write final to mem
//			Y0 = Y1;
//			lastCb = Cb;
//			lastCr = Cr;
//			//pMM2S_Mem[i] = pS2MM_Mem[1920*1080-i-1];
//		}
//		//xil_printf("loop %d\r\n", j);
//	}
//	// Grab the DMA Control Registers, and re-enable circular park mode.
//	vdma_MM2S_DMACR = XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_TX_OFFSET+XAXIVDMA_CR_OFFSET);
//	XAxiVdma_WriteReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_TX_OFFSET+XAXIVDMA_CR_OFFSET, vdma_MM2S_DMACR | XAXIVDMA_CR_TAIL_EN_MASK);
//	vdma_S2MM_DMACR = XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_RX_OFFSET+XAXIVDMA_CR_OFFSET);
//	XAxiVdma_WriteReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_RX_OFFSET+XAXIVDMA_CR_OFFSET, vdma_S2MM_DMACR | XAXIVDMA_CR_TAIL_EN_MASK);
//
//	xil_printf("Main SW processing loop complete!\r\n");
//	sleep(5);
//
//	// Uncomment when using TPG for Video input
//	//fmc_imageon_disable_tpg(config);
//
//	sleep(1);
//	return;
//}


/**
 * Oversees the capture and playback of captured image frames.
 */
void camera_interface(camera_config_t *config)
{
	pS2MM_Mem = (Xuint16 *)XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_S2MM_ADDR_OFFSET+XAXIVDMA_START_ADDR_OFFSET);
	pMM2S_Mem = (Xuint16 *)XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_MM2S_ADDR_OFFSET+XAXIVDMA_START_ADDR_OFFSET+4);

	// New cycle. Reset needed status flags.
	button_flag = false;
	// Checks which buttons or switches are active.
	check_inputs(&camera_config);
	// Plays the stored images to the screen.
	replay_mode_handler(&camera_config);
	if(button_flag == false)
	{
		// Reset the counter used for button debouncing.
		debounce_counter = 0;
	}
}


/**
 * Checks the register values for any active
 * button or switch gpio lines.
 */
void check_inputs(camera_config_t *config)
{
	/************ BUTTON Center ************/

	// Checks for valid BUTTON Center.
	if(*btn_ptr & BTN_CENTER)
	{
		if(replay_mode == VIDEO)
		{
			capture_video();
		}
		else
		{
			capture_image(&camera_config);
		}
	}

	/************ SWITCH 1 & 2 ************/

    // Checks for an active switch 0.
    if(*sw_ptr & SW_0)
    {
    	// Switching to Replay Mode.
    	replay_mode = IMAGE;
	}
	// Checks for an active switch 1. 
	else if (*sw_ptr & SW_1)
	{
    	// Switching to Video Mode.
    	replay_mode = VIDEO;
	}
	else
	{
		// Switching out of replay Mode.
		replay_mode = NONE;
	}

	/************ SWITCH 7 ************/

	// Checks for valid SWITCH 7.
    if(*sw_ptr & SW_7)
    {
    	xil_printf("Switch 7 activated.\r\n");
		// Exit application flag set.
		exit_flag = true;
	}

	/************ BUTTON UP ************/

	// Checks for valid BTN UP.
	if(*btn_ptr & BTN_UP)
	{
		// Array indexes.
		image_index = 0;
		replay_index = 0;
		xil_printf("\nReset indexes.\r\n");
	}
}


/**
 * Captures one image per button press.
 */
void capture_image()
{
	// A button has been pressed.
	button_flag = true;
	// The debounce counter has yet to hit the needed cycles.
	if(debounce_counter < debounce_threshold)
	{
		debounce_counter++;
		// Signals the a button has started the debounce process.
		debounce_finished = false;
	}
	// Enough cycles have passed of constant button press && this button's functions
	// have yet to be executed for this press.
	else if((debounce_counter >= debounce_threshold) && (debounce_finished != true))
	{
		// Debounce process finished.
		debounce_finished = true;
		xil_printf("Center button pressed.\r\n");
		// Pull the image into an array.
		store_image(image_index);
		disable_hardware();
		// Flash image to screen.
		display_image(image_index);
		// Holds for 2 seconds.
		sleep(2);
		enable_hardware();
		// Array boundary detection. Checks if next move will cause out-of-bounds error.
		if(!((image_index + 1) > MAX_IMAGES_TO_RECORD))
		{
			// Increments the frame index.
			image_index++;
			// Recorded images have been changed. Reset Replay index.
			replay_index = 0;
		}
	}
}


/**
 * Stores a video without debouncing.
 */
void capture_video()
{
	// Pull the image into an array.
	store_image(image_index);
	// Array boundary detection. Checks if next move will cause out-of-bounds error.
	if(!((image_index + 1) > MAX_IMAGES_TO_RECORD))
	{
		// Increments the frame index.
		image_index++;
		// Recorded images have been changed. Reset Replay index.
		replay_index = 0;
	}
}


/**
 * 	Handles the logic to play back stored images.
 */
void replay_mode_handler(camera_config_t *config)
{
	// Check for image mode.
	if(replay_mode == IMAGE)
	{
		individual_image();
	}
	// Check for video mode.
	else if(replay_mode == VIDEO)
	{
		video_playback();
	}
}


/**
 * Plays the current image. Buttons have no debouncing and
 * therefore holding the button plays the images as a video.
 */
void video_playback(camera_config_t *config)
{
	// Increments the 'replay_index'. Plays the next image.
	if(*btn_ptr & BTN_UP)
	{
		xil_printf("UP button pressed.\r\n");
		// Does not play indexes that hold no data. (Unrecorded)
		while(replay_index <= image_index)
		{
			// Play stored array.
			// Flash image to screen.
			display_image(replay_index);
			// Check for max images.
			if(!((replay_index + 1) > MAX_IMAGES_TO_RECORD))
			{
				// Array will be inbounds. Increment.
				replay_index++;
			}
			replay_index++;
		}
	}
	// Decrement the 'replay_index'. Plays the previous image.
	if(*btn_ptr & BTN_DOWN)
	{
		xil_printf("DOWN button pressed.\r\n");
		disable_hardware();
		while(replay_index > 0)
		{
			// Array boundary detection. Checks if next move will cause out-of-bounds error.
			if(!((replay_index - 1) < 0))
			{
				// Array will be inbounds. Decrement.
				replay_index--;
				// Flash image to screen.
				display_image(replay_index);
			}
		}
	}
}


/** 
 * Handles the logic to play back a single image at a time.
 */
void individual_image()
{
	// Increments the 'replay_index'. Plays the next image.
	if(*btn_ptr & BTN_RIGHT)
	{
		// A button has been pressed.
		button_flag = true;
		// The debounce counter has yet to hit the needed cycles.
		if(debounce_counter < debounce_threshold)
		{
			debounce_counter++;
			// Signals the a button has started the debounce process.
			debounce_finished = false;
		}
		// Enough cycles have passed of constant button press && this button's functions
		// have yet to be executed for this press.
		else if((debounce_counter >= debounce_threshold) && (debounce_finished != true))
		{
			// Debounce process finished.
			debounce_finished = true;
			xil_printf("RIGHT button pressed.\r\n");
			// Does not play indexes that hold no data. (Unrecorded)
			if(replay_index <= image_index)
			{
				// Play stored array.
				// Flash image to screen.
				display_image(replay_index);
				// Check for max images.
				if(!((replay_index + 1) > MAX_IMAGES_TO_RECORD))
				{
					// Array will be inbounds. Increment.
					replay_index++;
				}
			}
		}

	}
	// Decrement the 'replay_index'. Plays the previous image.
	if(*btn_ptr & BTN_LEFT)
	{
		// A button has been pressed.
		button_flag = true;
		// The debounce counter has yet to hit the needed cycles.
		if(debounce_counter < debounce_threshold)
		{
			debounce_counter++;
			// Signals the a button has started the debounce process.
			debounce_finished = false;
		}
		// Enough cycles have passed of constant button press && this button's functions
		// have yet to be executed for this press.
		else if((debounce_counter >= debounce_threshold) && (debounce_finished != true))
		{
			// Debounce process finished.
			debounce_finished = true;
			xil_printf("LEFT button pressed.\r\n");
			// Array boundary detection. Checks if next move will cause out-of-bounds error.
			if(!((replay_index - 1) < 0))
			{
				// Array will be inbounds. Decrement.
				replay_index--;
				// Flash image to screen.
				display_image(replay_index);
			}
		}
	}
}


/**
 * Flashes the image stored at the current index to the screen.
 */
void display_image(int index)
{
	xil_printf("Replayed @ index: %d\r\n", index);
	// Play stored array index.
	size_t size = res*sizeof(uint16_t);
	memcpy(&pS2MM_Mem, images[res*index], size);

}


/**
 * Store the image at the passed in index.
 */
void store_image(int index)
{
	// Capture and store the current image.
	xil_printf("Stored @ index: %d\r\n", index);
	// Copy contents on image into memory.
	size_t size = res*sizeof(uint16_t);
	memcpy(&images[res*index], pS2MM_Mem, size);
}


/**
 * Halts the hardware pipeline.
 */
void disable_hardware(camera_config_t *config)
{
	Xuint32 parkptr;
	Xuint32 vdma_S2MM_DMACR, vdma_MM2S_DMACR;
	// Grab the DMA parkptr, and update it to ensure that when parked, the S2MM side is on frame 0, and the MM2S side on frame 1
	parkptr = XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_PARKPTR_OFFSET);
	parkptr &= ~XAXIVDMA_PARKPTR_READREF_MASK;
	parkptr &= ~XAXIVDMA_PARKPTR_WRTREF_MASK;
	parkptr |= 0x1;
	XAxiVdma_WriteReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_PARKPTR_OFFSET, parkptr);
	// Grab the DMA Control Registers, and clear circular park mode.
	vdma_MM2S_DMACR = XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_TX_OFFSET+XAXIVDMA_CR_OFFSET);
	XAxiVdma_WriteReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_TX_OFFSET+XAXIVDMA_CR_OFFSET, vdma_MM2S_DMACR & ~XAXIVDMA_CR_TAIL_EN_MASK);
	vdma_S2MM_DMACR = XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_RX_OFFSET+XAXIVDMA_CR_OFFSET);
	XAxiVdma_WriteReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_RX_OFFSET+XAXIVDMA_CR_OFFSET, vdma_S2MM_DMACR & ~XAXIVDMA_CR_TAIL_EN_MASK);
}


/**
 * Re-enables the hardware pipeline.
 */
void enable_hardware(camera_config_t *config)
{
	// Grab the DMA Control Registers, and re-enable circular park mode.
	vdma_MM2S_DMACR = XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_TX_OFFSET+XAXIVDMA_CR_OFFSET);
	XAxiVdma_WriteReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_TX_OFFSET+XAXIVDMA_CR_OFFSET, vdma_MM2S_DMACR | XAXIVDMA_CR_TAIL_EN_MASK);
	vdma_S2MM_DMACR = XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_RX_OFFSET+XAXIVDMA_CR_OFFSET);
	XAxiVdma_WriteReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_RX_OFFSET+XAXIVDMA_CR_OFFSET, vdma_S2MM_DMACR | XAXIVDMA_CR_TAIL_EN_MASK);
}
